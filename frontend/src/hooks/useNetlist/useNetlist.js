import { useMemo } from 'react';
import { v4 as uuidv4 } from 'uuid'
import lodash from 'lodash';

function isConnected(el, connection) {
  return el.id === connection.start || el.id === connection.end;
}

// TODO: Condense unnecessary nodes
function condenseNodes(schematic) {
  return schematic
}

function withVirtualNodes(schematic) {
  for (const connection of schematic.connections) {
    // Search for all components that share this connection
    const connectors = schematic.components.filter((component) =>
      component.ports.find((port) => isConnected(port, connection)),
    );

    // If the connection is shared between 2 components,
    // create a new virtual node between them.
    if (connectors.length === 2) {
      // Create virtual node
      const virtualNode = { id: uuidv4() };
      schematic.nodes.push(virtualNode);
      
      // Create new connection
      schematic.connections.push({
        id: uuidv4(),
        start: virtualNode.id,
        end: connection.end,
      });
      
      // Update old connection
      connection.end = virtualNode.id;
    }
  }

  return schematic;
}

function generateNodesString(component, schematic) {
  let nodeStr = '';

  for (const port of component.ports) {
    // Search for the node connected to the port
    const conn = schematic.connections.find((conn) => isConnected(port, conn));
    const node = schematic.nodes.find((node) => isConnected(node, conn))

    // Convert it into string
    nodeStr += `${node.label?.name ?? node.id} `
  }

  return nodeStr;
}

function buildNetlist(schematic) {
  // TODO: Add more info to the header (author, date, ...)
  let netlist = '# Analysis netlist generated by U=RIsolve\n\n';

  // Fix the schematic's data model
  schematic = condenseNodes(schematic);
  schematic = withVirtualNodes(schematic);

  // Add each component to the netlist
  for (const component of schematic.components) {
    const nodesStr = generateNodesString(component, schematic);
    netlist += `${component.type}:${component.label?.name} ${nodesStr}\n`;
  }

  return netlist;
}

export function useNetlist(schematic) {
  return useMemo(() => {
    const sch = lodash.cloneDeep(schematic);
    return buildNetlist(sch);
  }, [schematic]);
};
  